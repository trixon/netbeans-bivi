/* 
 * Copyright 2015 Patrik Karlsson.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package se.trixon.bivi.browser.album;

import java.awt.BorderLayout;
import javax.swing.tree.TreeSelectionModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.ActionReferences;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import se.trixon.bivi.core.BiviGlobals;
import se.trixon.bivi.core.BiviTopComponent;
import se.trixon.bivi.db.api.DbMonitor;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//se.trixon.bivi.browser.album//AlbumBrowser//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "AlbumBrowserTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "se.trixon.bivi.browser.album.AlbumBrowserTopComponent")
@ActionReferences({
    @ActionReference(path = "Menu/Browse", position = 0),
    @ActionReference(path = "Shortcuts", name = "D-1")
})
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_AlbumBrowserAction",
        preferredID = "AlbumBrowserTopComponent"
)
public final class AlbumBrowserTopComponent extends BiviTopComponent implements ExplorerManager.Provider, DbMonitor.DbEvent {

    private final ExplorerManager mExplorerManager = BiviGlobals.getAlbumExplorerManager();
    private BeanTreeView mBeanTreeView;

    public AlbumBrowserTopComponent() {
        mBundle = NbBundle.getBundle(getClass());
        initComponents();
        setName(mBundle.getString("CTL_AlbumBrowserTopComponent"));
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);

        init();
    }

    public static AlbumBrowserTopComponent getInstance() {
        return (AlbumBrowserTopComponent) WindowManager.getDefault().findTopComponent("AlbumBrowserTopComponent");
    }

    public Node[] getSelectedNodes() {
        return mExplorerManager.getSelectedNodes();
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return mExplorerManager;
    }

    @Override
    public void onDbChanged() {
        populate();
    }

    @Override
    public void onDbRootAlbumsChanged() {
        populate();
    }

    private void init() {
        associateLookup(ExplorerUtils.createLookup(BiviGlobals.getAlbumExplorerManager(), getActionMap()));
//        ExplorerUtils.
//        associateLookup(Lookup.getDefault());
        mBeanTreeView = new BeanTreeView();
        mBeanTreeView.setRootVisible(false);
        mBeanTreeView.setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        add(mBeanTreeView, BorderLayout.CENTER);
        DbMonitor.INSTANCE.add(this);
        populate();
    }

    private void populate() {
        Children albumRoot = Children.create(new AlbumRootChildFactory(), true);
        Node rootNode = new AbstractNode(albumRoot);
        rootNode.setDisplayName(getName());
        mExplorerManager.setRootContext(rootNode);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    void writeProperties(java.util.Properties p) {
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
    }
}
